[{"body":"产品介绍 狸猫IM提供完全私有化的即时通讯解决方案 狸猫IM的架构设计上具有如下特点：\n go语言开发，高性能与易维护兼得 私有二进制协议，包大小极小，最小心跳包只有1byte，耗电小，流量小，传输速度快。 采用tcp协议+ack机制保证有序、不丢消息。 扩展性强 目前支持群组频道，点对点频道，后续可以根据自己业务自定义频道可实现机器人对话，在线客服等等功能 多端同步，web，pc，app消息实时同步。  ","excerpt":"产品介绍 狸猫IM提供完全私有化的即时通讯解决方案 狸猫IM的架构设计上具有如下特点：\n go语言开发，高性能与易维护兼得 私有二进制协议，包大小极小，最小心跳包只有1byte，耗电小，流量小，传输速 …","ref":"/docs/overview/","title":"概要和介绍"},{"body":"","excerpt":"","ref":"/docs/android/","title":"Android端集成与开发"},{"body":"","excerpt":"","ref":"/docs/ios/","title":"iOS端集成与开发"},{"body":"","excerpt":"","ref":"/docs/pc/","title":"PC端集成与开发"},{"body":"","excerpt":"","ref":"/docs/server/","title":"Server端集成与开发"},{"body":"什么是频道 ","excerpt":"什么是频道 ","ref":"/docs/overview/what_channel/","title":"频道的概念"},{"body":"","excerpt":"","ref":"/docs/","title":"狸猫IM文档"},{"body":"","excerpt":"","ref":"/docs/android/import-sdk/","title":"导入SDK"},{"body":"LiMaoIMSDK分为如下几部分 连接管理(LIMConnectionManager)\n 与IM建立连接或断开连接 监听IM连接状态  聊天管理(LIMChatManager)\n 消息相关的增删改查操作 聊天消息的监听  最近会话管理(LIMConversationManager)\n 最近会话列表的增删改查操作 最近会话列表数据监听  多媒体文件管理(LIMMediaManager)\n 消息文件的上传下载 消息文件的上传下载监听  频道管理(LIMChannelManager)\n 频道数据的增删改操作 频道数据变化监听  [LIMSDK shared]点出一切 所有的管理者都可以通过LiMaoIMSDK提供的[LIMSDK shared]单例对象获取到\n// 连接管理者实例 [LIMSDK shared].connectionManager // 聊天管理者实例 [LIMSDK shared].chatManager // 最近会话管理者实例 [LIMSDK shared].conversationManager // 消息多媒体管理者实例 [LIMSDK shared].mediaManager // 频道管理者实例 [LIMSDK shared].channelManager 几乎每个管理者都有委托协议，用于SDK的数据变化通知到UI层 // 添加委托 [[LIMSDK shared].xxxManager addDelegate:self]; // 移除委托 [[LIMSDK shared].xxxManager removeDelegate:self]; UI层与SDK的数据交互流程图\n  UI层与SDK的数据交互流程图   ","excerpt":"LiMaoIMSDK分为如下几部分 连接管理(LIMConnectionManager)\n 与IM建立连接或断开连接 监听IM连接状态  聊天管理(LIMChatManager)\n 消息相关的增删改查 …","ref":"/docs/ios/intro/","title":"概要"},{"body":"示例:\n// 构建正文  LIMTextContent *content = [[LIMTextContent alloc] initWithContent:@\u0026#34;这是一条测试消息\u0026#34;]; // 发送  [[LIMSDK shared].chatManager sendMessage:content channel:[[LIMChannel alloc] initWith:@\u0026#34;uid\u0026#34; channelType:LIM_PERSON]]; 参数说明:\n   参数 类型 说明     content string 文本内容    ","excerpt":"示例:\n// 构建正文  LIMTextContent *content = [[LIMTextContent alloc] initWithContent:@\u0026#34;这是一条测试消息\u0026#34;]; …","ref":"/docs/ios/message_send/text/","title":"文本消息"},{"body":"引入基础SDK模块 通过 CocoaPods 管理依赖, CocoaPods 是目前最流行的 Cocoa 项目库依赖管理工具之一，考虑到便捷与项目的可维护性，我们推荐您使用 CocoaPods 导入并管理 SDK\npod 'LiMaoIMSDK' 引入\nimport \u0026lt;LiMaoIMSDK/LiMaoIMSDK.h\u0026gt; 引入UI相关模块 如果你需要用到聊天的UI或在我们提供的UI上进行二次开发，则需要引入 LIMBase项目,下载LiMaoBase path后替换为自己下载的路径\npod 'LiMaoBase', :path =\u0026gt; './Modules/LiMaoBase' 引入\nimport \u0026lt;LiMaoBase/LiMaoBase.h\u0026gt; ","excerpt":"引入基础SDK模块 通过 CocoaPods 管理依赖, CocoaPods 是目前最流行的 Cocoa 项目库依赖管理工具之一，考虑到便捷与项目的可维护性，我们推荐您使用 CocoaPods 导入并 …","ref":"/docs/ios/import-sdk/","title":"导入SDK"},{"body":"","excerpt":"","ref":"/docs/android/init/","title":"初始化"},{"body":"简单配置 （推荐） 一句代码初始化IM服务器\n[LIMSDK shared].connectURL = @\u0026#34;lim://IP:PORT?uid=xxx\u0026amp;token=xxx\u0026#34;; // 例如：@\u0026#34;lim://49.235.59.182:6666?uid=xxx\u0026amp;token=xxx\u0026#34;; IP: IM服务器的IP地址\nPORT: IM服务器的端口\nuid: 用户连接的唯一ID （由服务器提供）\ntoken: 用户连接凭证 （由服务器提供）\n 所有配置 [LIMSDK shared].options.isDebug = true; // 是否开启debug模式 [LIMSDK shared].options.host = @\u0026#34;49.235.59.182\u0026#34;; // IM服务器的IP [LIMSDK shared].options.port = 6666; // IM服务器的端口 [LIMSDK shared].options.heartbeatInterval = 60; // 心跳间隔 （ 单位秒） [LIMSDK shared].options.dbDir = [[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject] stringByAppendingPathComponent:@\u0026#34;db\u0026#34;]; // 数据库的存储目录 [LIMSDK shared].options.messageFileRootDir = [[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject] stringByAppendingPathComponent:@\u0026#34;files\u0026#34;]; // 消息文件根目录 [LIMSDK shared].options.messageRetryInterval = 5; // 消息重试间隔 (单位秒) [LIMSDK shared].options.messageRetryCount = 8; // 消息重试次数 [LIMSDK shared].options.offlineMessageLimit = 300; // 离线消息每次拉取数量 [LIMSDK shared].options.connectInfo = nil; // 连接信息 // 设置IM连接信息回调（当IM需要取连接信息时会调用此方法，如果设置了connectInfo则不会回调） [LIMSDK shared].options.connectInfoCallback = ^LIMConnectInfo * _Nonnull{ LIMConnectInfo *connectInfo = [LIMConnectInfo new]; connectInfo.uid = \u0026#34;xxxx\u0026#34;; connectInfo.token = \u0026#34;xxxx\u0026#34;; return connectInfo; }; ","excerpt":"简单配置 （推荐） 一句代码初始化IM服务器\n[LIMSDK shared].connectURL = @\u0026#34;lim://IP:PORT?uid=xxx\u0026amp;token=xxx\u0026#34;; …","ref":"/docs/ios/init/","title":"初始化"},{"body":"示例:\n// 构建正文  LIMImageContent *content = [LIMImageContent initWithImage:image]; // 发送  [[LIMSDK shared].chatManager sendMessage:content channel:[[LIMChannel alloc] initWith:@\u0026#34;uid\u0026#34; channelType:LIM_PERSON]]; 参数说明:\n   参数 类型 说明     image UIImage 图片对象    ","excerpt":"示例:\n// 构建正文  LIMImageContent *content = [LIMImageContent initWithImage:image]; // 发送  [[LIMSDK …","ref":"/docs/ios/message_send/image/","title":"图片消息"},{"body":"","excerpt":"","ref":"/docs/android/login/","title":"登录"},{"body":"示例:\n// 构建正文  LIMVoiceContent *content =[LIMVoiceContent initWithData:voiceData second:second] // 发送  [[LIMSDK shared].chatManager sendMessage:content channel:[[LIMChannel alloc] initWith:@\u0026#34;uid\u0026#34; channelType:LIM_PERSON]]; 参数说明:\n   参数 类型 说明     voiceData NSData 语音数据   second NSInteger 秒数    ","excerpt":"示例:\n// 构建正文  LIMVoiceContent *content =[LIMVoiceContent initWithData:voiceData second:second] // …","ref":"/docs/ios/message_send/voice/","title":"语音消息"},{"body":"// 开始连接  [[LIMSDK shared].connectionManager connect]; // 断开连接 NO: SDK保持重连机制 YES: SDK将不再进行重连  [[LIMSDK shared].connectionManager disconnect:NO]; 需要监听连接状态的页面实现委托 LIMConnectionManagerDelegate\n// 添加委托 [[LIMSDK shared].connectionManager addDelegate:self]; /** 连接状态监听 */ -(void) onConnectStatus:(LIMConnectStatus)status; /** 连接被踢出 @param reasonCode 踢出原因代号 可有第三方服务器提供代号 @param reason 踢出原因字符串 可由第三方服务器提供踢出原因 实现类似微信的效果 比如：账号设备xxx上登录，登录地点为xxx */ -(void) onKick:(uint8_t)reasonCode reason:(NSString*)reason; ","excerpt":"// 开始连接  [[LIMSDK shared].connectionManager connect]; // 断开连接 NO: SDK保持重连机制 YES: SDK …","ref":"/docs/ios/connect/","title":"连接与断开"},{"body":"","excerpt":"","ref":"/docs/android/message/","title":"消息收发"},{"body":"// 添加委托 [[LIMSDK shared].chatManager addDelegate:self]; 消息的委托协议 LIMChatManagerDelegate\n/** 收到消息通知 @param message 收到的消息 @param left 消息剩余数量 ，可当left为0时再刷新UI,避免频繁刷新UI导致卡顿 */ - (void)onRecvMessages:(LIMMessage*)message left:(NSInteger)left; /** 消息更新通知 @param message 变化的消息 */ -(void) onMessageUpdate:(LIMMessage*) message; ... ","excerpt":"// 添加委托 [[LIMSDK shared].chatManager addDelegate:self]; 消息的委托协议 LIMChatManagerDelegate\n/** …","ref":"/docs/ios/chat_delegate/","title":"消息监听"},{"body":"/** 发送消息 (发送并保存消息) @param content 消息正文 @param channel 投递的频道 */ [[LIMSDK shared].chatManager sendMessage:(LIMMessageContent*)content channel:(LIMChannel*)channel]; ","excerpt":"/** 发送消息 (发送并保存消息) @param content 消息正文 @param channel 投递的频道 */ [[LIMSDK shared].chatManager …","ref":"/docs/ios/message_send/","title":"消息发送"},{"body":"","excerpt":"","ref":"/docs/android/conversation/","title":"最近会话"},{"body":" 最近会话用于表示会话列表页的数据模型。当用户发送，收取及删除消息时，都会同时去修改最近会话。\n当收到或者一条消息时，会自动生成这个消息对应的最近会话。但值得注意的是最近会话和会话并不是一一对应的关系，删除最近会话并不会影响会话\n // 添加委托 [[LIMSDK shared].conversationManager addDelegate:self]; 最近会话的委托协议 LIMConversationManagerDelegate\n... /** 当最近会话被新增的时候会调用此方法 @param conversation 最近会话对象 @param left 会话剩余数量 UI层可以判断left == 0 的时候才刷新 避免频繁刷新UI导致卡顿 */ - (void)onConversationAdd:(LIMConversation*)conversation left:(NSInteger)left; /** 当最近会话对象更新的时候会调用此方法 @param conversation 最近会话对象 @param left 会话剩余数量 UI层可以判断left == 0 的时候才刷新 避免频繁刷新UI导致卡顿 */ - (void)onConversationUpdate:(LIMConversation*)conversation left:(NSInteger)left; /** 最近会话未读数发送改变 @param channel 频道 @param unreadCount 未读数量 */ - (void)onConversationUnreadCountUpdate:(LIMChannel*)channel unreadCount:(NSInteger)unreadCount; ... 查询所有最近会话数据\nNSArray\u0026lt;LIMConversation*\u0026gt; *conversations =[[LIMSDK shared].conversationManager getConversationList]; ","excerpt":" 最近会话用于表示会话列表页的数据模型。当用户发送，收取及删除消息时，都会同时去修改最近会话。\n当收到或者一条消息时，会自动生成这个消息对应的最近会话。但值得注意的是最近会话和会话并不是一一对应的关 …","ref":"/docs/ios/conversation/","title":"最近会话"},{"body":"在即时通讯软件中有许多提醒字眼的内容显示，如果下图，在狸猫IM中，我们统一抽象为了 “提醒”功能。\n  最近会话对象里包含提醒管理者 提醒管理者可以操作当前最近会话的提醒\n@interface LIMConversation : NSObject ... /** 提醒管理 可以获取到 LIMReminder的集合 和操作LIMReminder的增删改 但是都是临时的不存数据库。 */ @property(nonatomic,strong) LIMReminderManager *reminderManager; ... @end 最近会话提醒对象\n@interface LIMReminder : NSObject /** 提醒的类型 目前SDK中已声明了 LIMReminderTypeMentionMe 有人@我 LIMReminderTypeDraft 草稿 两个类型 用户可以根据自己的需求自定义类型 ，一个种类型在一个最近会话里只保留最新的，比如两个人@了我，则只保留最新的@我的信息 */ @property(nonatomic,assign) LIMReminderType type; /** 提醒文本 比如有人@我 则 文本就是 “有人@我” */ @property(nonatomic,copy) NSString *text; /** 提醒包含的数据 有一些提醒需要用到一些数据，但是大部分提醒都不需要数据，所以此字段非必填 */ @property(nonatomic,strong) NSDictionary *data; @end 最近会话管理者(LIMConversationManager)可以对提醒进行本地数据库存储\n@interface LIMConversationManager : NSObject /** 追加提醒,同时触发最近会话更新的委托 @param reminder 提醒项 @param channel 频道 @return 追加后的最近会话 */ -(LIMConversation*) appendReminder:(LIMReminder*) reminder channel:(LIMChannel*)channel; /** 获取频道里指定类型的提醒 @param type 提醒类型 @param channel 频道 @return \u0026lt;#return value description#\u0026gt; */ -(LIMReminder*) getReminder:(LIMReminderType)type channel:(LIMChannel*)channel; /** 清除指定频道的所有提醒，同时触发最近会话更新的委托 @param channel 频道 */ -(void) clearAllReminder:(LIMChannel*)channel; @end 举例：假设在某个最近会话上显示“[红包]”字眼的提醒 只需要一句代码即可\n流程: 监听红包消息 -\u0026gt; 执行下面的代码 （执行下面代码因为会触发最近会话更新的委托，会自动刷新UI显示）\n[[LIMSDK shared].conversationManager appendReminder:[LIMReminder initWithType:LIMReminderTypeRedPacket text:@\u0026#34;[红包]\u0026#34; data:nil] channel:CHANNEL] ","excerpt":"在即时通讯软件中有许多提醒字眼的内容显示，如果下图，在狸猫IM中，我们统一抽象为了 “提醒”功能。\n  最近会话对象里包含提醒管理者 提醒管理者可以操作当前最近会话的提醒\n@interface …","ref":"/docs/ios/conversation/reminder/","title":"显示提醒"},{"body":"","excerpt":"","ref":"/docs/android/history/","title":"历史记录"},{"body":"查询指定频道的历史消息记录\nNSArray\u0026lt;LIMMessage*\u0026gt; *messages =[[LIMSDK shared].chatManager getHistoryMessages:channel oldestClientSeq:0 limit:20]; 参数说明:\n   参数 类型 说明     channel LIMChannel 频道对象   oldestClientSeq uint32_t 上次查询到的最新数据的客户端编号，第一次查询则为0   limit int 查询消息数量限制    ","excerpt":"查询指定频道的历史消息记录\nNSArray\u0026lt;LIMMessage*\u0026gt; *messages =[[LIMSDK shared].chatManager …","ref":"/docs/ios/history/","title":"历史记录"},{"body":"","excerpt":"","ref":"/docs/android/channel/","title":"频道管理"},{"body":"获取指定频道信息 LIMChannelInfo *channelInfo = [[LIMSDK shared].channelManager getChannelInfo:channel]; 参数说明:\n   参数 类型 说明     channel LIMChannel 频道对象    提取频道信息（走网络） 提取频道信息会调用第三方提供的获取频道信息的方法，更新对应本地数据库的频道数据。调用此方法会触发 LIMChannelManagerDelegate的 channelInfoUpdate 方法通知到UI，UI可获得最新的频道信息数据更新对应界面\n[[LIMSDK shared].channelManager fetchChannelInfo:channel completion:(_Nullable LIMChannelInfoBlock)channelInfoBlock]; 获取指定频道的成员列表 NSArray\u0026lt;LIMChannelMember*\u0026gt; *members = [[LIMSDK shared].channelManager getMembersWithChannel:channel]; 参数说明:\n   参数 类型 说明     channel LIMChannel 频道对象    添加或更新频道信息 // 单个增加 [[LIMSDK shared].channelManager addOrUpdateChannelInfo:channelInfo]; // 批量增加 [[LIMSDK shared].channelManager addOrUpdateChannelInfos:(NSArray\u0026lt;LIMChannelInfo*\u0026gt;*) channelInfos]; 参数说明:\n   参数 类型 说明     channelInfo LIMChannelInfo 频道信息对象    添加或修改频道成员 [[LIMSDK shared].channelManager addOrUpdateMembers:members]; 参数说明:\n   参数 类型 说明     members NSArray\u0026lt;LIMChannelMember*\u0026gt; 频道成员数组    更新频道的设置 触发LIMChannelManagerDelegate的 channelInfoUpdate\n[[LIMSDK shared].channelManager updateChannelSetting:channel setting:settingDict]; 参数说明:\n   参数 类型 说明     channel LIMChannel 频道对象   settingDict NSDictory 设置的字典 比例设置免打扰 则传 @{@\u0026ldquo;mute\u0026rdquo;:@(true)} 设置多个 @{@\u0026ldquo;mute\u0026rdquo;:@(true),@\u0026ldquo;stick\u0026rdquo;:@(true)}    ","excerpt":"获取指定频道信息 LIMChannelInfo *channelInfo = [[LIMSDK shared].channelManager getChannelInfo:channel]; 参数说 …","ref":"/docs/ios/channel/","title":"频道管理"},{"body":"","excerpt":"","ref":"/docs/android/channel_provider/","title":"频道资料对接"},{"body":"LiMaoIMSDK会判断是否有频道资料，如果SDK没有频道资料 会调用上层设置的ChannelInfoUpdate的block来告知上层需要提供指定channel的频道资料，例子代码如下\n[[LIMSDK shared] setChannelInfoUpdate:^(LIMChannel * _Nonnull channel,LIMChannelInfoCallback callback) { if(channel.channelType == LIM_PERSON) { // 更新个人信息  // 请求API获取频道资料  [[LIMAPIClient sharedClient] GET:[NSString stringWithFormat:@\u0026#34;users/%@\u0026#34;,channel.channelId] parameters:nil].then(^(NSDictionary* resultDict){ // 构建LIMChannelInfo  LIMChannelInfo *channelInfo = [LIMChannelInfo new]; channelInfo.channel = [[LIMChannel alloc] initWith:resultDict[@\u0026#34;uid\u0026#34;] channelType:LIM_PERSON]; // 个人频道  channelInfo.name = resultDict[@\u0026#34;name\u0026#34;]; // 频道名称  channelInfo.mute = resultDict[@\u0026#34;mute\u0026#34;]?[resultDict[@\u0026#34;mute\u0026#34;] boolValue]:false; // 频道是否免打扰  channelInfo.stick = resultDict[@\u0026#34;top\u0026#34;]?[resultDict[@\u0026#34;top\u0026#34;] boolValue]:false; // 频道是否置顶  channelInfo.logo = [NSString stringWithFormat:@\u0026#34;%@%@\u0026#34;,[LIMApp shared].config.apiBaseUrl,resultDict[@\u0026#34;avatar\u0026#34;]]; // 频道的logo（头像）  // 添加或更新频道（调用此方法会触发LIMChannelManagerDelegate的channelInfoUpdate，在此方法里可以做具体UI刷新操作）  [[LIMSDK shared].channelManager addOrUpdateChannelInfo:channelInfo]; if(callback) { callback(nil); } }).catch(^(NSError *error){ LIMLogError(@\u0026#34;获取频道信息失败！-\u0026gt; %@\u0026#34;,error); if(callback) { callback(error); } }); } else if(channel.channelType == LIM_GROUP) { // 同步群信息  ... } }]; ","excerpt":"LiMaoIMSDK会判断是否有频道资料，如果SDK没有频道资料 会调用上层设置的ChannelInfoUpdate的block来告知上层需要提供指定channel的频道资料， …","ref":"/docs/ios/channel_provider/","title":"频道资料对接"},{"body":"","excerpt":"","ref":"/docs/android/offline_msg/","title":"离线消息对接"},{"body":"如果没有设置离线提供者时，SDK只或收到在线消息。离线消息提供者设置如下:\n// 离线消息提供者  [[LIMSDK shared] setOfflineMessageProvider:^(int limit, uint32_t messageSeq, LIMOfflineMessageCallback _Nonnull callback) { // 请求服务器同步消息  // max_message_seq: 为当前客户端的最大消息序列号, 接口只会返回大于此序列号的消息  // limit:每次同步的消息数量  [[LIMAPIClient sharedClient] POST:[NSString stringWithFormat:@\u0026#34;message/sync\u0026#34;] parameters:@{@\u0026#34;max_message_seq\u0026#34;:@(messageSeq),@\u0026#34;limit\u0026#34;:@(limit)}].then(^(NSArray\u0026lt;NSDictionary*\u0026gt;* messageDicts){ NSMutableArray *messages = [[NSMutableArray alloc] init]; if(messageDicts \u0026amp;\u0026amp; messageDicts.count\u0026gt;0) { for (NSDictionary *messageDict in messageDicts) { [messages addObject:[self toMessage:messageDict]]; } callback(messages,true,nil); // 这里不能判断返回数据小于limit(count\u0026gt;=limit)就没有更多了, 因为有可能服务器遇到解析不出消息里的payload而服务器会丢掉此消息 这样返回数据小于limit但是服务器还有离线消息  }else { callback(messages,false,nil); } }).catch(^(NSError *err){ LIMLogError(@\u0026#34;拉去离线消息失败！-\u0026gt; %@\u0026#34;,err); callback(nil,false,err); }); } offlineMessagesAck:^(uint32_t messageSeq, void (^ _Nonnull complete)(NSError *error)) { // 离线消息ACk回执  // 告诉服务器客户端最后一次同步到的消息序列号 messageSeq  [[LIMAPIClient sharedClient] POST:[NSString stringWithFormat:@\u0026#34;message/syncack/%d\u0026#34;,messageSeq] parameters:nil].then(^{ if(complete) { complete(nil); } }).catch(^(NSError *err){ LIMLogError(@\u0026#34;离线消息回执失败！-\u0026gt; %@\u0026#34;,err); if(complete) { complete(err); } }); }]; ","excerpt":"如果没有设置离线提供者时，SDK只或收到在线消息。离线消息提供者设置如下:\n// 离线消息提供者  [[LIMSDK shared] setOfflineMessageProvider:^(int …","ref":"/docs/ios/offline_msg/","title":"离线消息对接"},{"body":"","excerpt":"","ref":"/docs/android/advanced/","title":"高级功能"},{"body":"","excerpt":"","ref":"/docs/ios/advanced/","title":"高级功能"},{"body":"","excerpt":"","ref":"/docs/android/advanced/custom_message/","title":"自定义消息"},{"body":"为了更好的满足大部分需求，狸猫IM提供自定义消息。自定义消息分三部走，这里以自定义一个GIF消息举例\n 继承LIMMessageContent和定义消息的字段  @interface LIMGIFContent : LIMMessageContent //GIF的地址 @property(nonatomic,copy) NSString *url; // GIF图片宽度 @property(nonatomic,assign) NSInteger width; // GIF图片高度 @property(nonatomic,assign) NSInteger height; @end 实现消息的编码和解码  @implementation LIMGIFContent // 解码消息 - (void)decodeWithJSON:(NSDictionary *)contentDic { self.url = contentDic[@\u0026#34;url\u0026#34;]; self.width = contentDic[@\u0026#34;width\u0026#34;]?[contentDic[@\u0026#34;width\u0026#34;] integerValue]:100; self.height = contentDic[@\u0026#34;height\u0026#34;]?[contentDic[@\u0026#34;height\u0026#34;] integerValue]:100; } // 编码消息 - (NSDictionary *)encodeWithJSON { NSMutableDictionary *dataDict = [NSMutableDictionary dictionary]; [dataDict setObject:self.url?:@\u0026#34;\u0026#34; forKey:@\u0026#34;url\u0026#34;]; [dataDict setObject:@(self.width) forKey:@\u0026#34;width\u0026#34;]; [dataDict setObject:@(self.height) forKey:@\u0026#34;height\u0026#34;]; return dataDict; } // 指定消息的正文类型 +(NSInteger) contentType { return LIM_GIF; } @end 注册消息  [[LIMSDK shared] registerMessageContent:LIMGIFContent.class]; 如果使用了狸猫IM的UI库，则具体定义消息UI的流程搜索LIMGIFContent和LIMGIFMessageCell查看具体代码 ","excerpt":"为了更好的满足大部分需求，狸猫IM提供自定义消息。自定义消息分三部走，这里以自定义一个GIF消息举例\n 继承LIMMessageContent和定义消息的字段  @interface …","ref":"/docs/ios/advanced/custom_message/","title":"自定义消息"},{"body":"","excerpt":"","ref":"/docs/android/advanced/cmd/","title":"命令消息"},{"body":"","excerpt":"","ref":"/docs/android/advanced/mention/","title":"@消息"},{"body":"// @指定用户 mentionedInfo = [[LIMMentionedInfo alloc] initWithMentionedType:LIM_Mentioned_Users uids:@[@\u0026#34;uid1\u0026#34;,@\u0026#34;uid2\u0026#34;]]; // @所有用户 //mentionedInfo = [[LIMMentionedInfo alloc] initWithMentionedType:LIM_Mentioned_ALL];  LIMTextContent *content = [[LIMTextContent alloc] initWithContent:text]; content.mentionedInfo = mentionedInfo; ","excerpt":"// @指定用户 mentionedInfo = [[LIMMentionedInfo alloc] initWithMentionedType:LIM_Mentioned_Users …","ref":"/docs/ios/advanced/mention/","title":"@消息"},{"body":"","excerpt":"","ref":"/docs/android/advanced/revoke/","title":"消息撤回"},{"body":"","excerpt":"","ref":"/index.json","title":""},{"body":"","excerpt":"","ref":"/search/","title":"Search Results"},{"body":" Welcome to 狸猫IM: A Docsy Example Project! Learn More   Download   Porridge temperature assessment - in the cloud!\n\n        狸猫IM provides a single web UI providing visibility into porridge temperature, chair size, and bed softness metrics! You can even find out who\u0026rsquo;s been eating your porridge.\n(Sadly, 狸猫IM isn\u0026rsquo;t a real project, but you can use this site as an example to create your own real websites with Docsy)\n      New chair metrics! The 狸猫IM UI now shows chair size metrics by default.\nPlease follow this space for updates!\n   Contributions welcome! We do a Pull Request contributions workflow on GitHub. New users are always welcome!\n…\n   Follow us on Twitter! For announcement of latest features etc.\n…\n     This is the second Section        Download from AppStore Get the 狸猫IM app!\n   Contributions welcome! We do a Pull Request contributions workflow on GitHub. New users are always welcome!\n…\n   Follow us on Twitter! For announcement of latest features etc.\n…\n     This is another Section     ","excerpt":"Welcome to 狸猫IM: A Docsy Example Project! Learn More   Download   Porridge temperature assessment - …","ref":"/","title":"狸猫IM"}]